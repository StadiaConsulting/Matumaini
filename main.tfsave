
resource "aws_iam_policy_attachment" "EcsServiceRoleAttachment" {
  name = "EcsServiceRoleAttachment"
  roles       = ["${aws_iam_role.EcsServiceRole.name}"]
  policy_arn = "${aws_iam_policy.EcsServiceRolePolicy.arn}"
}

resource "aws_iam_role" "ECSTaskRole" {
  name = "ECSTaskRole"
  path = "/"
  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
					{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ecs-tasks.amazonaws.com"]
						},
						"Action": [
							"sts:AssumeRole"]
					}
				]
			}

EOF
}

resource "aws_iam_policy" "ECSTaskRolePolicy" {
  path = "/"

  policy = <<EOF
{
  "Version": "2012-10-17",
	"Statement": [
		{
			"Effect": "Allow",
			"Action": [
				"ecr:GetAuthorizationToken",
				"ecr:BatchCheckLayerAvailability",
				"ecr:GetDownloadUrlForLayer",
				"ecr:BatchGetImage",
				"logs:CreateLogStream",
				"logs:CreateLogGroup",
				"logs:PutLogEvents"
			],
			"Resource": "*"
		},
		{
			"Effect": "Allow",
			"Action": [
				"dynamodb:Scan",
				"dynamodb:Query",
				"dynamodb:UpdateItem",
				"dynamodb:GetItem"
			],
			"Resource": "arn:aws:dynamodb:*:*:table/${var.DBTable}*"
		}
	]
}
EOF
}

resource "aws_iam_policy_attachment" "EcsServiceTaskRoleAttachment" {
  name = "EcsServiceTaskRoleAttachment"
  roles       = ["${aws_iam_role.ECSTaskRole.name}"]
  policy_arn = "${aws_iam_policy.ECSTaskRolePolicy.arn}"
}

resource "aws_ecs_cluster" "ECSCluster" {
  name = "${var.ECSCluster}"
}


resource "aws_cloudwatch_log_group" "LogGroup" {
  name = "${var.DockerAppName}-logs"
}

resource "aws_ecs_task_definition" "ECSTaskDef" {
  family = "${var.ContainerService}"
  network_mode ="awsvpc"
  cpu = 256
  memory = 512
  requires_compatibilities = ["FARGATE"]
  execution_role_arn = "${aws_iam_role.EcsServiceRole.arn}"
  task_role_arn =  "${aws_iam_role.ECSTaskRole.arn}"
  container_definitions =<<EOF
[
  {
    "cpu": 256,
    "image": "image",
    "memory": 512,
    "name": "${var.ContainerService}",
    "networkMode": "awsvpc",
    "portMappings": [
      {
        "containerPort": 8080,
        "hostPort": 8080
      }
    ]
  }
]
EOF
}

resource "aws_ecs_service" "main" {
  name            = "${var.ECSService}"
  cluster         = "${aws_ecs_cluster.ECSCluster.id}"
  task_definition = "${aws_ecs_task_definition.ECSTaskDef.arn}"
  desired_count   = "1"
  launch_type     = "FARGATE"

  network_configuration {
    security_groups = ["${aws_security_group.FargateContainerSecurityGroup.id}"]
    subnets         = ["${aws_subnet.PrivateSubnetOne.id}",
                      "${aws_subnet.PrivateSubnetTwo.id}"]
  }

  load_balancer {
    target_group_arn = "${aws_lb_target_group.AppNLB_TG.id}"
    container_name   = "${var.ContainerService}"
    container_port   = "8080"
  }

  depends_on = [
    "aws_lb_listener.AppNLBListener",
  ]
}

resource "aws_lb" "AppNLB" {
  name               = "${var.DockerAppName}-nlb"
  internal           = false
  load_balancer_type = "network"
  subnets            = ["${aws_subnet.PublicSubnetOne.id}", "${aws_subnet.PublicSubnetTwo.id}"]
  enable_deletion_protection = false
}

resource "aws_lb_target_group" "AppNLB_TG" {
  name     = "${var.NLB_TG}"
  port     = 8080
  protocol = "TCP"
  vpc_id   = "${aws_vpc.VPC.id}"
  target_type = "ip"
  health_check {
    interval = 10
    path = "/"
    protocol = "HTTP"
    healthy_threshold = 3
    unhealthy_threshold = 3
  }
}

resource "aws_lb_listener" "AppNLBListener" {
  load_balancer_arn = "${aws_lb.AppNLB.arn}"
  port              = "80"
  protocol          = "TCP"

  default_action {
    type             = "forward"
    target_group_arn = "${aws_lb_target_group.AppNLB_TG.arn}"
  }
}

# Created this service link out of band.
#aws iam create-service-linked-role --aws-service-name ecs.amazonaws.com







output "REPLACE_ME_ECS_SERVICE_ROLE_ARN" {
  value = "${aws_iam_role.EcsServiceRole.arn}"
}
output "REPLACE_ME_ECS_TASK_ROLE_ARN" {
  value = "${aws_iam_role.ECSTaskRole.arn}"
}
output "REPLACE_ME_VPC_ID" {
  value = "${aws_vpc.VPC.id}"
}
output "REPLACE_ME_PUBLIC_SUBNET_ONE" {
  value = "${aws_subnet.PublicSubnetOne.id}"
}
output "REPLACE_ME_PUBLIC_SUBNET_TWO" {
  value = "${aws_subnet.PublicSubnetTwo.id}"
}
output "REPLACE_ME_PRIVATE_SUBNET_ONE" {
  value = "${aws_subnet.PrivateSubnetOne.id}"
}
output "REPLACE_ME_PRIVATE_SUBNET_TWO" {
  value = "${aws_subnet.PrivateSubnetTwo.id}"
}
output "REPLACE_ME_SECURITY_GROUP_ID" {
  value = "${aws_security_group.FargateContainerSecurityGroup.id}"
}
